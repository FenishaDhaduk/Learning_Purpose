import React, { useState } from "react";
import * as FileSaver from "file-saver";
import XLSX from "sheetjs-style";
import "bootstrap/dist/css/bootstrap.min.css";


// ws: This variable represents a worksheet, and it is created using XLSX.utils.json_to_sheet([userData]).
// json_to_sheet converts an array of objects (in this case, a single object userData) into a worksheet.
// wb: This variable represents a workbook. It is an object with two properties: Sheets and SheetNames.
// The Sheets property contains the worksheet (data) created earlier, and
// the SheetNames property is an array with the name of the sheet, which is set to "data".
// excelbuffer: This variable contains the binary Excel data.
// It is generated by calling XLSX.write with the workbook wb, specifying the book type as "xlsx" and the output type as "array".
// data: This variable represents a Blob (Binary Large Object),
// which is essentially a file-like object of immutable, raw data. It is created using the Blob constructor, and
// it contains the Excel data (excelbuffer) with the specified MIME type (filetype).
// Finally, FileSaver.saveAs is used to trigger the download of the Blob as a file.
// It takes the Blob (data) and a filename (fileName + fileextentions) for the downloaded file.

function Excelexport() {
  const [userData, setUserData] = useState([]);
  const [currentData, setCurrentData] = useState({
    FirstName: "",
    lastname: "",
    CompanyName: "",
    CityName: "",
  });

  const filetype =
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8";
  const fileextentions = ".xlsx";
  const fileName="Excel Export"

  const exportToExcel = () => {
    const ws = XLSX.utils.json_to_sheet(userData);
    const wb = { Sheets: { data: ws }, SheetNames: ["data"] };
    const excelbuffer = XLSX.write(wb, { bookType: "xlsx", type: "array" });
    const data = new Blob([excelbuffer], { type: filetype });
    FileSaver.saveAs(data, fileName + fileextentions);
  };

  const handleInputChange = (event) => {
    setCurrentData({ ...currentData, [event.target.name]: event.target.value });
  };

  const handleAddData = () => {
    setUserData([...userData, currentData]);
    setCurrentData({
      FirstName: "",
      lastname: "",
      CompanyName: "",
      CityName: "",
    });
  };

  return (
    <>
      <div className="container mt-5">
        <form>
          <div className="mb-3">
            <label className="form-label">FirstName</label>
            <input
              type="text"
              className="form-control"
              name="FirstName"
              value={currentData.FirstName}
              onChange={handleInputChange}
            />
          </div>
          <div className="mb-3">
            <label className="form-label">LastName</label>
            <input
              type="text"
              className="form-control"
              name="lastname"
              value={currentData.lastname}
              onChange={handleInputChange}
            />
          </div>
          <div className="mb-3">
            <label className="form-label">CompanyName</label>
            <input
              type="text"
              className="form-control"
              name="CompanyName"
              value={currentData.CompanyName}
              onChange={handleInputChange}
            />
          </div>
          <div className="mb-3">
            <label className="form-label">CityName</label>
            <input
              type="text"
              className="form-control"
              name="CityName"
              value={currentData.CityName}
              onChange={handleInputChange}
            />
          </div>
          <button 
            type="button"
            className="btn btn-primary"
            onClick={handleAddData}
          >
            Add Data
          </button>
          <button
          style={{marginLeft:"5px"}}
            type="button"
            className="btn btn-primary"
            onClick={exportToExcel}
          >
            Export to Excel
          </button>
        </form>
      </div>
    </>
  );
}

export default Excelexport;